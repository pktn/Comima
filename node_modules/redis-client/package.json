{
  "name": "redis-client",
  "description": "Redis client for Node.js",
  "version": "0.3.5",
  "keywords": [
    "redis",
    "node",
    "client"
  ],
  "author": {
    "name": "Brian Hammond",
    "email": "brian@fictorial.com"
  },
  "contributors": [
    {
      "name": "Brian Hammond",
      "url": "http://fictorial.com"
    },
    {
      "name": "Brit Gardner",
      "url": "http://britg.com"
    },
    {
      "name": "Corey Donohoe",
      "url": "http://www.atmos.org"
    },
    {
      "name": "Elliott Cable",
      "url": "http://elliottcable.name/"
    },
    {
      "name": "Jake McGraw",
      "url": "http://jakemcgraw.com"
    },
    {
      "name": "James Herdman",
      "url": "http://jherdman.github.com"
    },
    {
      "name": "Justin Tulloss",
      "url": "http://justin.harmonize.fm/"
    },
    {
      "name": "Nikhil",
      "url": "http://kodeclutz.blogspot.com"
    },
    {
      "name": "technoweenie",
      "url": "rick"
    },
    {
      "name": "Donovan Hide",
      "url": "http://availableimagination.com"
    },
    {
      "name": "Philip Hofstetter",
      "url": "http://www.gnegg.ch/"
    },
    {
      "name": "Chris Winberry",
      "url": "http://tautologistics.com/"
    },
    {
      "name": "Brian McKinney",
      "url": "http://twitter.com/tritonrc"
    },
    {
      "name": "Alberto Piai",
      "url": "http://github.com/brainlock"
    }
  ],
  "licenses": [
    "MIT"
  ],
  "repositories": {
    "type": "git",
    "url": "http://github.com/fictorial/redis-node-client.git"
  },
  "bugs": {
    "web": "http://github.com/fictorial/redis-node-client/issues"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "os": [
    "linux",
    "darwin"
  ],
  "dependencies": {},
  "engines": {
    "node": ">0.1.90"
  },
  "main": "./lib/redis-client",
  "readme": "# Redis client for Node.js\n\n## In a nutshell\n\n- Talk to Redis from Node.js \n- Fully asynchronous; your code is called back when an operation completes\n- [Binary-safe](http://github.com/fictorial/redis-node-client/blob/master/test/test.js#L353-363); uses Node.js Buffer objects for request serialization and reply parsing\n    - e.g. store a PNG in Redis if you'd like\n- Client API directly follows Redis' [command specification](http://code.google.com/p/redis/wiki/CommandReference) \n- *You have to understand how Redis works and the semantics of its command set to most effectively use this client*\n- Supports Redis' new exciting [PUBSUB](http://code.google.com/p/redis/wiki/PublishSubscribe) commands\n- Automatically reconnects to Redis (doesn't drop commands sent while waiting to reconnect either) using [exponential backoff](http://en.wikipedia.org/wiki/Exponential_backoff)\n    - Be sure to see [this script](http://github.com/fictorial/redis-node-client/blob/master/test/test_shutdown_reconnect.js) for a deeper discussion\n\n## Synopsis\n\nWhen working from a git clone:\n\n    var sys = require(\"sys\");\n    var client = require(\"../lib/redis-client\").createClient();\n    client.info(function (err, info) {\n        if (err) throw new Error(err);\n        sys.puts(\"Redis Version is: \" + info.redis_version);\n        client.close();\n    });\n\nWhen working with a Kiwi-based installation:\n\n    // $ kiwi install redis-client\n\n    var sys = require(\"sys\"), \n        kiwi = require(\"kiwi\"),\n        client = kiwi.require(\"redis-client\").createClient();\n\n    client.info(function (err, info) {\n        if (err) throw new Error(err);\n        sys.puts(\"Redis Version is: \" + info.redis_version);\n        client.close();\n    });\n\n- Refer to the many tests in `test/test.js` for many usage examples.\n- Refer to the `examples/` directory for focused examples.\n\n## Installation\n\nThis version requires at least `Node.js v0.1.90` and Redis `1.3.8`.\n\nTested with Node.js `v0.1.95` and `v0.1.96` and Redis `2.1.1` (the current unstable).\n\nYou have a number of choices:\n\n- git clone this repo or download a tarball and simply copy `lib/redis-client.js` into your project\n- use git submodule\n- use the [Kiwi](http://github.com/visionmedia/kiwi) package manager for Node.js\n\nPlease let me know if the package manager \"seeds\" and/or metadata have issues.\nInstallation via Kiwi or NPM at this point isn't really possible since this repo\ndepends on a unreleased version of Node.js.\n\n## Running the tests\n\nA good way to learn about this client is to read the test code.\n\nTo run the tests, install and run redis on the localhost on port 6379 (defaults).\nThen run `node test/test.js [-v|-q]` where `-v` is for \"verbose\" and `-q` is for \"quiet\".\n\n    $ node test/test.js\n    ..................................................................\n    ...........................++++++++++++++++++++++++++++++++++++\n\n    [INFO] All tests have passed.\n\nIf you see something like \"PSUBSCRIBE: unknown command\" then it is time to upgrade\nyour Redis installation.\n\n## Documentation\n\nThere is a method per Redis command.  E.g. `SETNX` becomes `client.setnx`.\n\nFor example, the Redis command [INCRBY](http://code.google.com/p/redis/wiki/IncrCommand)\nis specified as `INCRBY key integer`.  Also, the INCRBY spec says that the reply will\nbe \"... the new value of key after the increment or decrement.\"\n\nThis translates to the following client code which increments key 'foo' by 42.  If\nthe value at key 'foo' was 0 or non-existent, 'newValue' will take value 42 when\nthe callback function is called.\n\n    client.incrby('foo', 42, function (err, newValue) {\n        // ...\n    });\n\nThis can get [a little wacky](http://github.com/fictorial/redis-node-client/blob/master/test/test.js#L1093-1097). \nI'm open to suggestions for improvement here.\n\nNote: for PUBSUB, you should use `subscribeTo` and `unsubscribeFrom` instead of the generated\nmethods for Redis' `SUBSCRIBE` and `UNSUBSCRIBE` commands.  See [this](http://github.com/fictorial/redis-node-client/blob/master/lib/redis-client.js#L682-694)\nand [this](http://github.com/fictorial/redis-node-client/blob/master/examples/subscriber.js#L14).\n\n## Notes\n\nAll commands/requests use the Redis *multi-bulk request* format which will be\nthe only accepted request protocol come Redis 2.0.\n\n",
  "_id": "redis-client@0.3.5",
  "dist": {
    "shasum": "73487f1100357d5bfd8d5e2f7f67f178a9ab6ff7"
  },
  "_from": "redis-client"
}
