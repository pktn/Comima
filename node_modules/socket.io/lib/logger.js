
/*!
 * socket.io-node
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var util = require('./util')
  , toArray = util.toArray;

/**
 * Log levels.
 */

var levels = [
    'error'
  , 'warn'
  , 'info'
  , 'debug'
];

/**
 * Colors for log levels.
 */

var colors = [
    31
  , 33
  , 36
  , 90
];

/**
 * Pads the nice output to the longest log level.
 */

function pad (str) {
  var max = 0;

  for (var i = 0, l = levels.length; i < l; i++)
    max = Math.max(max, levels[i].length);

  if (str.length < max)
    return str + new Array(max - str.length + 1).join('');

  return str;
};

/**
 * Logger (console).
 *
 * @api public
 */

var Logger = module.exports = function (opts) {
  opts = opts || {}
  this.colors = false !== opts.colors;
  this.level = 3;
  this.enabled = true;
};

/**
 * Log method.
 *
 * @api public
 */

Logger.prototype.log = function (type) {
  var index = levels.indexOf(type);

  if (index > this.level || !this.enabled)
    return this;

  console.log.apply(
      console
    , [ this.colors
        ? getDate() + ' - ' + '\033[' + colors[index] + 'm' + pad(type) + '\033[39m: [socket.io]'
        : type + ':'
      ].concat(toArray(arguments).slice(1))
  );

	// added for comima
	function getDate() {
	  var now      = new Date();
	  var fullYear = now.getFullYear();
	  var month    = now.getMonth();
	  var date     = now.getDate();
	  var hours    = now.getHours();
	  var minutes  = now.getMinutes();
	  var seconds  = now.getSeconds();
	
	  if ( month   < 10 ) month   = '0' + month;
	  if ( date    < 10 ) date    = '0' + date;
	  if ( hours   < 10 ) hours   = '0' + hours;
	  if ( minutes < 10 ) minutes = '0' + minutes;
	  if ( seconds < 10 ) seconds = '0' + seconds;
	  var str =
	    [ fullYear, month, date ].join('-')
	    + ' '
	    + [ hours, minutes, seconds ].join(':');
  	return str;
	}

  return this;
};

/**
 * Generate methods.
 */

levels.forEach(function (name) {
  Logger.prototype[name] = function () {
    this.log.apply(this, [name].concat(toArray(arguments)));
  };
});
